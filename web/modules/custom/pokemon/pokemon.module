<?php
/**
 * @file
 * Primary module hooks for pokemon module.
 */

use Drupal\advancedqueue\Entity\Queue;
use Drupal\advancedqueue\Job;
use Drupal\Core\Entity\EntityInterface;
use Drupal\media\Entity\Media;
use Drupal\node\NodeInterface;
use Drupal\pokemon\Controller\PokemonTaxonomyTermController;
use Drupal\pokemon\Event\PokemonMailingListEvent;
use Drupal\taxonomy\Entity\Term;

/**
 * Implements hook_theme().
 */
function pokemon_theme($existing, $type, $theme, $path) {
  return [
    'pokemon_tax_term' => [
      'variables' => [
        'taxonomy_term' => NULL,
      ],
      'file' => 'pokemon.theme.inc',
    ],
    'pokemon_node' => [
      'variables' => [
        'node' => NULL,
      ],
      'file' => 'pokemon.theme.inc',
    ],
  ];
}


/**
 * The callback for the cron job.
 */
function pokemon_ability_tax_callback(): void {
  pokemon_create_jobs(
    'ability',
    'pokemon_import_ability',
    'pokemon_ability_import_job',
    'ability_name');
}

/**
 * The callback for the cron job.
 */
function pokemon_color_tax_callback(): void {
  pokemon_create_jobs(
    'pokemon-color',
    'pokemon_import_color',
    'pokemon_color_import_job',
    'color_name');
}

/**
 * The callback for the cron job.
 */
function pokemon_habitat_tax_callback(): void {
  pokemon_create_jobs(
    'pokemon-habitat',
    'pokemon_import_habitat',
    'pokemon_habitat_import_job',
    'habitat_name');
}

/**
 * The callback for the cron job.
 */
function pokemon_shape_tax_callback(): void {
  pokemon_create_jobs(
    'pokemon-shape',
    'pokemon_import_shape',
    'pokemon_shape_import_job',
    'shape_name'
  );
}

/**
 * The callback for the cron job.
 */
function pokemon_species_tax_callback(): void {
  pokemon_create_jobs(
    'pokemon-species',
    'pokemon_import_species',
    'pokemon_species_import_job',
    'species_name');
}

/**
 * The callback for the cron job.
 */
function pokemon_form_tax_callback(): void {
  pokemon_create_jobs(
    'pokemon-form',
    'pokemon_import_form',
    'pokemon_form_import_job',
    'form_name');
}

/**
 * The callback for the cron job.
 */
function pokemon_type_tax_callback(): void {
  pokemon_create_jobs(
    'type',
    'pokemon_import_type',
    'pokemon_type_import_job',
    'type_name');
}

/**
 * The callback for the cron job.
 */
function pokemon_stat_tax_callback(): void {
  pokemon_create_jobs(
    'stat',
    'pokemon_import_stat',
    'pokemon_stat_import_job',
    'stat_name'
  );
}

/**
 * The callback for the cron job.
 */
function pokemon_egg_group_tax_callback(): void {
  pokemon_create_jobs(
    'egg-group',
    'pokemon_import_egg_group',
    'pokemon_egg_group_import_job',
    'egg_group_name'
  );
}

/**
 * The callback for the cron job.
 */
function pokemon_node_callback(): void {
  pokemon_create_jobs(
    'pokemon',
    'pokemon_import_node',
    'pokemon_node_import_job',
    'pokemon_name', 50);
}

function pokemon_image_callback(): void {
  pokemon_create_jobs(
    'pokemon',
    'pokemon_import_image',
    'pokemon_image_import_job',
    'pokemon_name', 50);
}


function pokemon_create_jobs(string $endpoint, string $queue_id, string $job_type, string $field_name, int $limit = NULL): void {
  /** @var \Drupal\pokemon\PokemonManager $pokemon_manager */
  $pokemon_manager = \Drupal::service('pokemon.pokemon_manager');

  try {
    $list = is_null($limit)
      ? $pokemon_manager->getResourceList($endpoint)
      : $pokemon_manager->getResourceList($endpoint, $limit);
  } catch (\Throwable  $e) {
    return;
  }

  $queue = Queue::load($queue_id);
  foreach ($list['results'] as $value) {
    $job = Job::create($job_type, [$field_name => $value['name']]);
    $queue->enqueueJob($job);
  }
}

/**
 * Implements hook_mail().
 *
 * @see \Drupal\pokemon\Mail\MailHandler
 */
function pokemon_mail(string $key, array &$message, array $params): void {
  /** @var \Drupal\Core\Render\RendererInterface $renderer */
  $renderer = \Drupal::service('renderer');

  if (isset($params['headers'])) {
    $message['headers'] = array_merge($message['headers'], $params['headers']);
  }
  if (!empty($params['from'])) {
    $message['from'] = $params['from'];
  }
  $message['subject'] = $params['subject'];
  $message['body'][] = $renderer->renderPlain($params['body']);
}

/**
 * Implements hook_ENTITY_TYPE_update().
 */
function pokemon_node_update(NodeInterface $node) {
  if ($node->bundle() == "pokemon") {
    pokemon_dispatch_event($node, PokemonMailingListEvent::UPDATE_POKEMON_NODE);
  }
}

/**
 * Implements hook_ENTITY_TYPE_update().
 */
function pokemon_taxonomy_term_update(Term $term) {
  if (in_array($term->bundle(), PokemonTaxonomyTermController::VOCABULARIES)) {
    pokemon_dispatch_event($term, PokemonMailingListEvent::UPDATE_POKEMON_TAX_TERM);
  }
}

/**
 * Implements hook_ENTITY_TYPE_update().
 */
function pokemon_media_update(Media $media) {
  if ($media->bundle() == 'pokemon_image') {
    pokemon_dispatch_event($media, PokemonMailingListEvent::UPDATE_POKEMON_MEDIA);
  }
}

/**
 * Dispatch event function
 */
function pokemon_dispatch_event(EntityInterface $entity, string $event_name) {
  /** @var \Drupal\Component\EventDispatcher\ContainerAwareEventDispatcher $dispatcher */
  $dispatcher = \Drupal::service('event_dispatcher');
  $event = new PokemonMailingListEvent($entity);
  $dispatcher->dispatch($event, $event_name);
}

